
version: '3'

services:
  nginx:
    image: nginx
    ports:
      - 8080:8080
      - 9000:9000
    volumes:
      - ./nginx:/etc/nginx/templates
    depends_on:
      - minio
      - postgrest
      - opensearch
      - ui

  ui:
    build: ui
    command: npm run dev -- --port=3000 --host=0.0.0.0
    environment:
      PUBLIC_API_ENDPOINT: http://nginx:8080/api/v1
      AUTH_CLIENT_ID: ${AUTH_CLIENT_ID}
      AUTH_AUTHORIZATION_ENDPOINT: ${AUTH_AUTHORIZATION_ENDPOINT}
      AUTH_TOKEN_ENDPOINT: ${AUTH_TOKEN_ENDPOINT}
    volumes:
      - ./ui:/insight-ui

  postgrest:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: postgresql://${PG_API_USER}:${PG_API_PASSWORD}@postgres:5432/insight
      PGRST_DB_SCHEMAS: public
      PGRST_JWT_SECRET: "@/run/secrets/jwk"
      PGRST_JWT_ROLE_CLAIM_KEY: .roles[0]
      PGRST_DB_ANON_ROLE: external_anonymous
    secrets:
      - jwk
    depends_on:
      - postgres

  worker:
    build: worker
    command: watchmedo auto-restart -d=/usr/local/lib/python3.11/site-packages/insight_worker -p="*.py" -R insight-worker -- process-messages
    environment:
      OAUTHLIB_INSECURE_TRANSPORT: 1
      AUTH_TOKEN_ENDPOINT: ${AUTH_TOKEN_ENDPOINT}
      AUTH_CLIENT_ID: ${AUTH_WORKER_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${AUTH_WORKER_CLIENT_SECRET}
      TIKA_URI: http://tika:9998/tika
      POSTGRES_URI: postgresql://${PG_WORKER_USER}:${PG_WORKER_PASSWORD}@postgres:5432/insight
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      API_ENDPOINT: http://nginx:8080
      STORAGE_ENDPOINT: nginx:9000
      STORAGE_SECURE: False
      STORAGE_BUCKET: insight
    volumes:
      - ./worker/insight_worker:/usr/local/lib/python3.11/site-packages/insight_worker
    depends_on:
      - tika
      - postgres
      - opensearch
      - nginx

  tika:
    image: apache/tika

  opensearch:
    build: opensearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      discovery.type: single-node
      DISABLE_INSTALL_DEMO_CONFIG: True
    volumes:
      - opensearch-data:/usr/share/opensearch/data
      - ./certs/rootCA.pem:/usr/share/opensearch/config/rootCA.pem
      - ./certs/opensearch.pem:/usr/share/opensearch/config/opensearch.pem
      - ./certs/opensearch-key.pem:/usr/share/opensearch/config/opensearch-key.pem

  postgres:
    build: postgres
    environment:
      POSTGRES_USER: insight
      POSTGRES_PASSWORD: insight
      PG_API_USER: ${PG_API_USER}
      PG_API_PASSWORD: ${PG_API_PASSWORD}
      PG_WORKER_USER: ${PG_WORKER_USER}
      PG_WORKER_PASSWORD: ${PG_WORKER_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d

  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
      MINIO_IDENTITY_OPENID_CONFIG_URL: https://secure.ftm.nl/realms/insight/.well-known/openid-configuration
      MINIO_IDENTITY_OPENID_CLAIM_NAME: roles
      MINIO_IDENTITY_OPENID_CLIENT_ID: ${AUTH_CLIENT_ID}
    volumes:
      - minio-data:/data

  # Minio client, runs once, sets up the buckets and policies
  mc:
    image: minio/mc
    working_dir: /root/minio
    entrypoint: ./mc.sh
    environment:
      MINIO_ENDPOINT: http://nginx:9000
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    volumes:
      - ./minio:/root/minio
    depends_on:
      - minio

  # Insight CLI, runs in container so it can reach minio in development
  cli:
    build: cli
    environment:
      OAUTHLIB_INSECURE_TRANSPORT: 1
    volumes:
      - ./cli/insight_cli:/usr/local/lib/python3.11/site-packages/insight_cli
      - ./data:/root/data

secrets:
   jwk:
     file: .jwk

volumes:
  minio-data: {}
  postgres-data: {}
  opensearch-data: {}

