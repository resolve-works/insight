
version: '3'

services:
  ui:
    image: ghcr.io/followthemoney/insight-ui:v0.1.9
    network_mode: host
    environment:
      ORIGIN: http://localhost:3000
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      API_ENDPOINT: http://localhost:8080
      OIDC_ENDPOINT: ${OIDC_ENDPOINT}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_IDENTITY_ENDPOINT: ${STORAGE_IDENTITY_ENDPOINT}
      STORAGE_IDENTITY_ROLE: ${STORAGE_IDENTITY_ROLE}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
    volumes:
      - ./certs/rootCA.pem:/usr/local/share/ca-certificates/insight.crt
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgrest:
    image: postgrest/postgrest:v12.0.2
    environment:
      PGRST_DB_URI: postgresql://insight_authenticator:${PG_POSTGREST_PASSWORD}@postgres:5432/insight
      PGRST_DB_SCHEMAS: public
      PGRST_JWT_SECRET: "@/run/secrets/jwk"
      PGRST_JWT_ROLE_CLAIM_KEY: .roles[0]
      PGRST_DB_ANON_ROLE: external_anonymous
      PGRST_SERVER_PORT: 8080
    ports:
      - 8080:8080
    secrets:
      - jwk
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  worker:
    image: ghcr.io/followthemoney/insight-worker:v0.1.7
    network_mode: host
    environment:
      QUEUE: default
      POSTGRES_URI: postgresql://insight_worker:${PG_WORKER_PASSWORD}@localhost:5432/insight
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      RABBITMQ_USER: insight_worker
      RABBITMQ_PASSWORD: insight_worker
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
      OPENSEARCH_USER: insight_worker
      OPENSEARCH_PASSWORD: insight_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      mc:
        condition: service_completed_successfully

  ingest:
    image: ghcr.io/followthemoney/insight-worker:v0.1.7
    network_mode: host
    environment:
      QUEUE: ingest
      POSTGRES_URI: postgresql://insight_worker:${PG_WORKER_PASSWORD}@localhost:5432/insight
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESS_KEY: ${STORAGE_WORKER_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_WORKER_SECRET_KEY}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      RABBITMQ_USER: insight_worker
      RABBITMQ_PASSWORD: insight_worker
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
      OPENSEARCH_USER: insight_worker
      OPENSEARCH_PASSWORD: insight_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      mc:
        condition: service_completed_successfully

  opensearch:
    image: opensearchproject/opensearch:2.12.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
      DISABLE_INSTALL_DEMO_CONFIG: True
    volumes:
      - opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch-security/action_groups.yml:/usr/share/opensearch/config/opensearch-security/action_groups.yml
      - ./opensearch/opensearch-security/allowlist.yml:/usr/share/opensearch/config/opensearch-security/allowlist.yml
      - ./opensearch/opensearch-security/config.yml:/usr/share/opensearch/config/opensearch-security/config.yml
      - ./opensearch/opensearch-security/internal_users.yml:/usr/share/opensearch/config/opensearch-security/internal_users.yml
      - ./opensearch/opensearch-security/nodes_dn.yml:/usr/share/opensearch/config/opensearch-security/nodes_dn.yml
      - ./opensearch/opensearch-security/roles.yml:/usr/share/opensearch/config/opensearch-security/roles.yml
      - ./opensearch/opensearch-security/roles_mapping.yml:/usr/share/opensearch/config/opensearch-security/roles_mapping.yml
      - ./opensearch/opensearch-security/tenants.yml:/usr/share/opensearch/config/opensearch-security/tenants.yml
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./certs/rootCA.pem:/usr/share/opensearch/config/rootCA.pem
      - ./certs/opensearch.pem:/usr/share/opensearch/config/opensearch.pem
      - ./certs/opensearch-key.pem:/usr/share/opensearch/config/opensearch-key.pem

  rabbitmq:
    image: rabbitmq:3.12-management
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 3s
      timeout: 30s
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: insight
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  migrate:
    image: ghcr.io/followthemoney/insight-migrate:v0.1.4
    environment:
      POSTGRES_URI: "postgresql://insight:insight@postgres:5432/insight?sslmode=disable&x-migrations-table=\"private\".\"schema_migrations\"&x-migrations-table-quoted=1"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: pgvector/pgvector:pg16
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: insight
      POSTGRES_PASSWORD: insight
      PG_POSTGREST_PASSWORD: ${PG_POSTGREST_PASSWORD}
      PG_WORKER_PASSWORD: ${PG_WORKER_PASSWORD}
    healthcheck:
      test: pg_isready -U insight
      interval: 3s
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: minio/minio
    command: server /data
    healthcheck:
      test: mc ready local
      interval: 3s
    ports:
      - 9000:9000
    environment:
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
      MINIO_IDENTITY_OPENID_CONFIG_URL: https://secure.ftm.nl/realms/insight/.well-known/openid-configuration
      MINIO_IDENTITY_OPENID_CLAIM_NAME: roles
      MINIO_IDENTITY_OPENID_CLIENT_ID: ${OIDC_CLIENT_ID}
    volumes:
      - minio:/data

  # Minio client, runs once, sets up the buckets and policies
  mc:
    image: minio/mc
    working_dir: /root/minio
    command: ./mc.sh
    entrypoint: /bin/bash
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
    volumes:
      - ./minio:/root/minio
    depends_on:
      minio:
        condition: service_healthy

secrets:
   jwk:
     file: .jwk

volumes:
  minio: {}
  postgres: {}
  opensearch: {}
  rabbitmq: {}

