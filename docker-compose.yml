
version: '3'

services:
  nginx:
    image: nginx
    hostname: insight
    ports:
      - 8080:8080
      - 9000:9000
      - 5671:5671
    volumes:
      - ./docker/nginx/templates:/etc/nginx/templates
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs/insight.pem:/etc/ssl/insight.pem
      - ./certs/insight-key.pem:/etc/ssl/insight-key.pem
    depends_on:
      - minio
      - postgrest
      - ui

  ui:
    build: ui
    command: npm run dev -- --port=3000 --host=0.0.0.0
    environment:
      NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/insight.crt
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      PUBLIC_OIDC_ENDPOINT: ${OIDC_ENDPOINT}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      RABBITMQ_HOST: insight
      OPENSEARCH_HOST: opensearch
    volumes:
      - ./ui:/insight-ui
      - ./certs/rootCA.pem:/usr/local/share/ca-certificates/insight.crt
    depends_on:
      rabbitmq:
        condition: service_healthy

  postgrest:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: postgresql://insight_authenticator:${PG_POSTGREST_PASSWORD}@postgres:5432/insight
      PGRST_DB_SCHEMAS: public
      PGRST_JWT_SECRET: "@/run/secrets/jwk"
      PGRST_JWT_ROLE_CLAIM_KEY: .roles[0]
      PGRST_DB_ANON_ROLE: external_anonymous
    secrets:
      - jwk
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  worker:
    build: worker
    command: /bin/bash -c 'update-ca-certificates && pip install "watchdog[watchmedo]" && watchmedo auto-restart -d=/usr/local/lib/python3.11/site-packages/insight_worker -p="*.py" -R insight-worker -- process-messages'
    environment:
      SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      POSTGRES_URI: postgresql://insight_worker:${PG_WORKER_PASSWORD}@postgres:5432/insight
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      API_ENDPOINT: ${API_ENDPOINT}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESS_KEY: ${STORAGE_WORKER_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_WORKER_SECRET_KEY}
      RABBITMQ_HOST: insight
      RABBITMQ_USER: worker
      RABBITMQ_PASSWORD: 5Ytge8Xg4gI38sJXmi7q
      OPENSEARCH_HOST: opensearch
      OPENSEARCH_USER: worker
      OPENSEARCH_PASSWORD: m0nOtnEhob0kSKaZyFbQ
    volumes:
      - ./worker/insight_worker:/usr/local/lib/python3.11/site-packages/insight_worker
      - ./certs/rootCA.pem:/usr/local/share/ca-certificates/insight.crt

  opensearch:
    image: opensearchproject/opensearch:latest
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      discovery.type: single-node
      DISABLE_INSTALL_DEMO_CONFIG: True
    volumes:
      - opensearch:/usr/share/opensearch/data
      - ./docker/opensearch/opensearch-security/action_groups.yml:/usr/share/opensearch/config/opensearch-security/action_groups.yml
      - ./docker/opensearch/opensearch-security/allowlist.yml:/usr/share/opensearch/config/opensearch-security/allowlist.yml
      - ./docker/opensearch/opensearch-security/config.yml:/usr/share/opensearch/config/opensearch-security/config.yml
      - ./docker/opensearch/opensearch-security/internal_users.yml:/usr/share/opensearch/config/opensearch-security/internal_users.yml
      - ./docker/opensearch/opensearch-security/nodes_dn.yml:/usr/share/opensearch/config/opensearch-security/nodes_dn.yml
      - ./docker/opensearch/opensearch-security/roles.yml:/usr/share/opensearch/config/opensearch-security/roles.yml
      - ./docker/opensearch/opensearch-security/roles_mapping.yml:/usr/share/opensearch/config/opensearch-security/roles_mapping.yml
      - ./docker/opensearch/opensearch-security/tenants.yml:/usr/share/opensearch/config/opensearch-security/tenants.yml
      - ./docker/opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./certs/rootCA.pem:/usr/share/opensearch/config/rootCA.pem
      - ./certs/opensearch.pem:/usr/share/opensearch/config/opensearch.pem
      - ./certs/opensearch-key.pem:/usr/share/opensearch/config/opensearch-key.pem

  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 3s
      timeout: 30s
    ports:
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: insight
      RABBITMQ_DEFAULT_PASS: insight
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  migrate:
    image: migrate/migrate
    entrypoint: []
    command: /bin/sh -c "migrate -path=/migrations -database $$POSTGRES_URI up"
    environment:
      POSTGRES_URI: postgresql://${PG_USER}:${PG_PASSWORD}@postgres:5432/insight?sslmode=disable
    volumes:
      - ./migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: pgvector/pgvector:pg16
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      PG_POSTGREST_PASSWORD: ${PG_POSTGREST_PASSWORD}
      PG_WORKER_PASSWORD: ${PG_WORKER_PASSWORD}
    healthcheck:
      test: pg_isready -U insight
      interval: 3s
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
      MINIO_IDENTITY_OPENID_CONFIG_URL: https://secure.ftm.nl/realms/insight/.well-known/openid-configuration
      MINIO_IDENTITY_OPENID_CLAIM_NAME: roles
      MINIO_IDENTITY_OPENID_CLIENT_ID: ${OIDC_CLIENT_ID}
    volumes:
      - minio:/data

  # Minio client, runs once, sets up the buckets and policies
  mc:
    image: minio/mc
    working_dir: /root/minio
    command: ./mc.sh
    entrypoint: /bin/bash
    environment:
      MINIO_ENDPOINT: ${STORAGE_ENDPOINT}
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
    volumes:
      - ./docker/minio:/root/minio
      - ./certs/rootCA.pem:/root/.mc/certs/CAs/insight.pem
    depends_on:
      - nginx

  # Insight CLI, runs in container so it can reach minio in development
  cli:
    build: cli
    command: bash -c 'update-ca-certificates && bash'
    environment:
      SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt
    volumes:
      - ./cli/insight_cli:/usr/local/lib/python3.11/site-packages/insight_cli
      - ./data:/root/data
      - ./certs/rootCA.pem:/usr/local/share/ca-certificates/insight.crt

secrets:
   jwk:
     file: .jwk

volumes:
  minio: {}
  postgres: {}
  opensearch: {}
  rabbitmq: {}

