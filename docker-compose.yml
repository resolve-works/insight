services:
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    entrypoint: ['/opt/keycloak/bin/kc.sh', 'start-dev']
    healthcheck:
      # Poor mans curl, checks if port is open
      test: /bin/bash -c "echo > /dev/tcp/localhost/8000"
      interval: 3s
      retries: 10
    ports:
      - 8000:8000
    environment:
      KC_HTTPS_PORT: 8000
      KC_HTTPS_CERTIFICATE_FILE: /etc/ssl/keycloak/keycloak.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/ssl/keycloak/keycloak-key.pem
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./certs/keycloak.pem:/etc/ssl/keycloak/keycloak.pem
      - ./certs/keycloak-key.pem:/etc/ssl/keycloak/keycloak-key.pem
    depends_on:
      postgres:
        condition: service_healthy

  keycloak_init:
    image: quay.io/keycloak/keycloak:24.0
    network_mode: host
    entrypoint: ['/opt/keycloak_init/init.sh']
    environment:
      KEYCLOAK_SERVER: https://localhost:8000
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - ./keycloak:/opt/keycloak_init
      - ./certs/rootCA.pem:/opt/keycloak/conf/truststores/insight.pem
    depends_on:
      keycloak:
        condition: service_healthy

  ui:
    image: ghcr.io/resolve-works/insight-ui:v0.3.17
    network_mode: host
    environment:
      NODE_EXTRA_CA_CERTS: /usr/local/share/ca-certificates/insight.crt
      ORIGIN: http://localhost:3000
      OIDC_CLIENT_ID: insight
      API_ENDPOINT: http://localhost:8080
      OIDC_ENDPOINT: https://localhost:8000/realms/insight/protocol/openid-connect
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_IDENTITY_ENDPOINT: ${STORAGE_IDENTITY_ENDPOINT}
      STORAGE_IDENTITY_ROLE: ${STORAGE_IDENTITY_ROLE}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./certs/rootCA.pem:/usr/local/share/ca-certificates/insight.crt
    depends_on:
      rabbitmq:
        condition: service_healthy

  # https://github.com/PostgREST/postgrest/issues/1130
  postgrest_init:
    image: alpine/curl
    entrypoint: []
    command:
      [
        '/bin/sh',
        '-c',
        'apk add jq && /usr/bin/curl --cacert /etc/ssl/insight/insight.pem https://keycloak:8000/realms/insight/protocol/openid-connect/certs | jq -r ''.keys[] | select(.alg == "RS256")'' > /opt/jwks/insight'
      ]
    volumes:
      - jwks:/opt/jwks
      - ./certs/rootCA.pem:/etc/ssl/insight/insight.pem
    depends_on:
      keycloak_init:
        condition: service_completed_successfully

  postgrest:
    image: postgrest/postgrest:v12.2.2
    environment:
      PGRST_DB_URI: postgresql://insight_authenticator:${PG_POSTGREST_PASSWORD}@postgres:5432/insight
      PGRST_DB_SCHEMAS: public
      PGRST_JWT_SECRET: '@/opt/jwks/insight'
      PGRST_JWT_ROLE_CLAIM_KEY: .roles[0]
      PGRST_DB_ANON_ROLE: external_anonymous
      PGRST_SERVER_PORT: 8080
    ports:
      - 8080:8080
    volumes:
      - jwks:/opt/jwks
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgrest_init:
        condition: service_completed_successfully

  worker:
    image: ghcr.io/resolve-works/insight-worker:v0.3.12
    network_mode: host
    environment:
      QUEUE: default
      POSTGRES_URI: postgresql://insight_worker:${PG_WORKER_PASSWORD}@localhost:5432/insight
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      RABBITMQ_USER: insight_worker
      RABBITMQ_PASSWORD: insight_worker
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESS_KEY: ${STORAGE_WORKER_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_WORKER_SECRET_KEY}
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
      OPENSEARCH_USER: insight_worker
      OPENSEARCH_PASSWORD: insight_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio_init:
        condition: service_completed_successfully

  ingest:
    image: ghcr.io/resolve-works/insight-worker:v0.3.12
    deploy:
      replicas: 3
    network_mode: host
    environment:
      QUEUE: ingest
      POSTGRES_URI: postgresql://insight_worker:${PG_WORKER_PASSWORD}@localhost:5432/insight
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_BUCKET: ${STORAGE_BUCKET}
      STORAGE_ACCESS_KEY: ${STORAGE_WORKER_ACCESS_KEY}
      STORAGE_SECRET_KEY: ${STORAGE_WORKER_SECRET_KEY}
      RABBITMQ_HOST: localhost
      RABBITMQ_SSL: false
      RABBITMQ_USER: insight_worker
      RABBITMQ_PASSWORD: insight_worker
      OPENSEARCH_ENDPOINT: ${OPENSEARCH_ENDPOINT}
      OPENSEARCH_USER: insight_worker
      OPENSEARCH_PASSWORD: insight_worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio_init:
        condition: service_completed_successfully

  opensearch:
    image: opensearchproject/opensearch:2.12.0
    deploy:
      resources:
        limits:
          memory: 2G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
      DISABLE_INSTALL_DEMO_CONFIG: True
      # Limit memory usage
      OPENSEARCH_JAVA_OPTS: '-Xms512m -Xmx512m'
    volumes:
      - opensearch:/usr/share/opensearch/data
      - ./opensearch/opensearch-security/action_groups.yml:/usr/share/opensearch/config/opensearch-security/action_groups.yml
      - ./opensearch/opensearch-security/allowlist.yml:/usr/share/opensearch/config/opensearch-security/allowlist.yml
      - ./opensearch/opensearch-security/config.yml:/usr/share/opensearch/config/opensearch-security/config.yml
      - ./opensearch/opensearch-security/internal_users.yml:/usr/share/opensearch/config/opensearch-security/internal_users.yml
      - ./opensearch/opensearch-security/nodes_dn.yml:/usr/share/opensearch/config/opensearch-security/nodes_dn.yml
      - ./opensearch/opensearch-security/roles.yml:/usr/share/opensearch/config/opensearch-security/roles.yml
      - ./opensearch/opensearch-security/roles_mapping.yml:/usr/share/opensearch/config/opensearch-security/roles_mapping.yml
      - ./opensearch/opensearch-security/tenants.yml:/usr/share/opensearch/config/opensearch-security/tenants.yml
      - ./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml
      - ./certs/rootCA.pem:/usr/share/opensearch/config/rootCA.pem
      - ./certs/opensearch.pem:/usr/share/opensearch/config/opensearch.pem
      - ./certs/opensearch-key.pem:/usr/share/opensearch/config/opensearch-key.pem
    depends_on:
      keycloak:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4.0.6-management
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 3s
      timeout: 60s
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: insight
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./certs/rootCA.pem:/etc/ssl/insight/rootCA.pem
    depends_on:
      keycloak:
        condition: service_healthy

  debezium:
    image: debezium/server:3.0.0.Final
    environment:
      ENABLE_DEBEZIUM_SCRIPTING: true
      DEBEZIUM_SOURCE_DATABASE_HOSTNAME: postgres
      DEBEZIUM_SOURCE_DATABASE_PORT: 5432
      DEBEZIUM_SOURCE_DATABASE_USER: insight
      DEBEZIUM_SOURCE_DATABASE_PASSWORD: insight
      DEBEZIUM_SOURCE_DATABASE_DBNAME: insight
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_HOST: rabbitmq
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PORT: 5672
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_USERNAME: debezium
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PASSWORD: debezium
    volumes:
      - debezium:/debezium/data
      - ./debezium/application.properties:/debezium/config/application.properties
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  migrate:
    image: ghcr.io/resolve-works/insight-migrate:v0.3.9
    environment:
      POSTGRES_URI: 'postgresql://insight:insight@postgres:5432/insight?sslmode=disable&x-migrations-table="private"."schema_migrations"&x-migrations-table-quoted=1'
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: pgvector/pgvector:pg16
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U insight
      interval: 3s
    environment:
      POSTGRES_USER: insight
      POSTGRES_PASSWORD: insight
      PG_KEYCLOAK_PASSWORD: ${PG_KEYCLOAK_PASSWORD}
      PG_POSTGREST_PASSWORD: ${PG_POSTGREST_PASSWORD}
      PG_DEBEZIUM_PASSWORD: ${PG_DEBEZIUM_PASSWORD}
      PG_WORKER_PASSWORD: ${PG_WORKER_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    image: minio/minio
    command: server /data
    healthcheck:
      test: mc ready local
      interval: 3s
    ports:
      - 9000:9000
    environment:
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
      MINIO_IDENTITY_OPENID_CONFIG_URL: https://keycloak:8000/realms/insight/.well-known/openid-configuration
      MINIO_IDENTITY_OPENID_CLAIM_NAME: roles
      MINIO_IDENTITY_OPENID_CLIENT_ID: insight
    volumes:
      - minio:/data
      - ./certs/rootCA.pem:/root/.minio/certs/CAs/insight.pem
    depends_on:
      keycloak_init:
        condition: service_completed_successfully

  # Minio client, runs once, sets up the buckets and policies
  minio_init:
    image: minio/mc
    working_dir: /root/minio
    command: ./init.sh
    entrypoint: []
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ROOT_USER: ${STORAGE_ROOT_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_ROOT_SECRET_KEY}
      MINIO_WORKER_USER: ${STORAGE_WORKER_ACCESS_KEY}
      MINIO_WORKER_PASSWORD: ${STORAGE_WORKER_SECRET_KEY}
    volumes:
      - ./minio:/root/minio
    depends_on:
      minio:
        condition: service_healthy

secrets:
  jwk:
    file: .jwk

volumes:
  minio: {}
  postgres: {}
  opensearch: {}
  rabbitmq: {}
  debezium: {}
  jwks: {}
